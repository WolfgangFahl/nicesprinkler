{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nicesprinkler API Documentation","text":""},{"location":"#sprinkler.controller","title":"<code>controller</code>","text":"<p>Created on 13.08.2024</p> <p>@author: wf</p>"},{"location":"#sprinkler.model","title":"<code>model</code>","text":"<p>Created on 13.08.2024</p> <p>@author: wf</p>"},{"location":"#sprinkler.sprinkler_cmd","title":"<code>sprinkler_cmd</code>","text":"<p>Created on 13.08.2024</p> <p>@author: wf</p>"},{"location":"#sprinkler.sprinkler_cmd.NiceSprinklerCmd","title":"<code>NiceSprinklerCmd</code>","text":"<p>               Bases: <code>WebserverCmd</code></p> <p>command line handling for nicesprinkler</p> Source code in <code>sprinkler/sprinkler_cmd.py</code> <pre><code>class NiceSprinklerCmd(WebserverCmd):\n    \"\"\"\n    command line handling for nicesprinkler\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        constructor\n        \"\"\"\n        config = NiceSprinklerWebServer.get_config()\n        WebserverCmd.__init__(self, config, NiceSprinklerWebServer, DEBUG)\n\n    def getArgParser(self, description: str, version_msg) -&gt; ArgumentParser:\n        \"\"\"\n        override the default argparser call\n        \"\"\"\n        parser = super().getArgParser(description, version_msg)\n        parser.add_argument(\n            \"-v\",\n            \"--verbose\",\n            action=\"store_true\",\n            help=\"show verbose output [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"--config\",\n            default=\"example_config.yaml\",\n            help=\"path to sprinkler configuration file [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"--stl\",\n            default=\"example_garden.stl\",\n            help=\"path to sprinkler configuration file [default: %(default)s]\",\n        )\n        return parser\n</code></pre>"},{"location":"#sprinkler.sprinkler_cmd.NiceSprinklerCmd.__init__","title":"<code>__init__()</code>","text":"<p>constructor</p> Source code in <code>sprinkler/sprinkler_cmd.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    constructor\n    \"\"\"\n    config = NiceSprinklerWebServer.get_config()\n    WebserverCmd.__init__(self, config, NiceSprinklerWebServer, DEBUG)\n</code></pre>"},{"location":"#sprinkler.sprinkler_cmd.NiceSprinklerCmd.getArgParser","title":"<code>getArgParser(description, version_msg)</code>","text":"<p>override the default argparser call</p> Source code in <code>sprinkler/sprinkler_cmd.py</code> <pre><code>def getArgParser(self, description: str, version_msg) -&gt; ArgumentParser:\n    \"\"\"\n    override the default argparser call\n    \"\"\"\n    parser = super().getArgParser(description, version_msg)\n    parser.add_argument(\n        \"-v\",\n        \"--verbose\",\n        action=\"store_true\",\n        help=\"show verbose output [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"--config\",\n        default=\"example_config.yaml\",\n        help=\"path to sprinkler configuration file [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"--stl\",\n        default=\"example_garden.stl\",\n        help=\"path to sprinkler configuration file [default: %(default)s]\",\n    )\n    return parser\n</code></pre>"},{"location":"#sprinkler.sprinkler_cmd.main","title":"<code>main(argv=None)</code>","text":"<p>main call</p> Source code in <code>sprinkler/sprinkler_cmd.py</code> <pre><code>def main(argv: list = None):\n    \"\"\"\n    main call\n    \"\"\"\n    cmd = NiceSprinklerCmd()\n    exit_code = cmd.cmd_main(argv)\n    return exit_code\n</code></pre>"},{"location":"#sprinkler.sprinkler_core","title":"<code>sprinkler_core</code>","text":"<p>Created on 2024-08-13</p> <p>@author: wf</p>"},{"location":"#sprinkler.sprinkler_core.Angles","title":"<code>Angles</code>","text":"<p>Initial angles for the sprinkler</p> Source code in <code>sprinkler/sprinkler_core.py</code> <pre><code>@lod_storable\nclass Angles:\n    \"\"\"\n    Initial angles for the sprinkler\n    \"\"\"\n    horizontal: float\n    vertical: float\n</code></pre>"},{"location":"#sprinkler.sprinkler_core.HosePerformance","title":"<code>HosePerformance</code>","text":"<p>Hose performance specifications</p> Source code in <code>sprinkler/sprinkler_core.py</code> <pre><code>@lod_storable\nclass HosePerformance:\n    \"\"\"\n    Hose performance specifications\n    \"\"\"\n    max_distance: float\n    optimal_angle: float\n</code></pre>"},{"location":"#sprinkler.sprinkler_core.Lawn","title":"<code>Lawn</code>","text":"<p>Lawn dimensions in meters</p> Source code in <code>sprinkler/sprinkler_core.py</code> <pre><code>@lod_storable\nclass Lawn:\n    \"\"\"\n    Lawn dimensions in meters\n    \"\"\"\n    width: float\n    length: float\n</code></pre>"},{"location":"#sprinkler.sprinkler_core.MotorConfig","title":"<code>MotorConfig</code>","text":"<p>Configuration for a single motor</p> Source code in <code>sprinkler/sprinkler_core.py</code> <pre><code>@lod_storable\nclass MotorConfig:\n    \"\"\"\n    Configuration for a single motor\n    \"\"\"\n    ena_pin: int\n    dir_pin: int\n    pul_pin: int\n    steps_per_revolution: int\n    min_angle: int\n    max_angle: int\n</code></pre>"},{"location":"#sprinkler.sprinkler_core.SprinklerConfig","title":"<code>SprinklerConfig</code>","text":"<p>Complete configuration for the sprinkler system</p> Source code in <code>sprinkler/sprinkler_core.py</code> <pre><code>@lod_storable\nclass SprinklerConfig:\n    \"\"\"\n    Complete configuration for the sprinkler system\n    \"\"\"\n    lawn: Lawn\n    sprinkler_position: SprinklerPosition\n    initial_angles: Angles\n    hose_performance: HosePerformance\n    motors: Dict[str, MotorConfig] = field(default_factory=dict)\n</code></pre>"},{"location":"#sprinkler.sprinkler_core.SprinklerPosition","title":"<code>SprinklerPosition</code>","text":"<p>Sprinkler position in the lawn</p> Source code in <code>sprinkler/sprinkler_core.py</code> <pre><code>@lod_storable\nclass SprinklerPosition:\n    \"\"\"\n    Sprinkler position in the lawn\n    \"\"\"\n    x: float\n    y: float\n    z: float\n</code></pre>"},{"location":"#sprinkler.sprinkler_core.SprinklerSystem","title":"<code>SprinklerSystem</code>","text":"<p>Main sprinkler system class</p> Source code in <code>sprinkler/sprinkler_core.py</code> <pre><code>class SprinklerSystem:\n    \"\"\"\n    Main sprinkler system class\n    \"\"\"\n\n    def __init__(self, config_path: str, stl_file_path: str):\n        self.config = SprinklerConfig.load_from_yaml_file(config_path)\n        self.stl_mesh = mesh.Mesh.from_file(stl_file_path)\n        self.stl_analysis = self.analyze_stl()\n\n\n    def analyze_stl(self):\n        \"\"\"Analyze the STL file to determine key points for spray calculation\"\"\"\n        stl_min = np.min(self.stl_mesh.vectors, axis=(0, 1))\n        stl_max = np.max(self.stl_mesh.vectors, axis=(0, 1))\n        stl_dimensions = stl_max - stl_min\n        spray_origin = self.get_spray_origin()\n        return {\n            'min': stl_min,\n            'max': stl_max,\n            'dimensions': stl_dimensions,\n            'spray_origin': spray_origin\n        }\n\n    def get_spray_origin(self):\n        \"\"\"Get the spray origin from the config\"\"\"\n        return np.array([\n            self.config.sprinkler_position.x,\n            self.config.sprinkler_position.y,\n            self.config.sprinkler_position.z\n        ])\n\n    def calculate_spray_points(self):\n        spray_points = []\n        for h_angle in range(-90, 91, 5):  # horizontal angles from -90 to 90 in 5-degree steps\n            for v_angle in range(10, 61, 5):  # vertical angles from 10 to 60 in 5-degree steps\n                distance = self.calculate_spray_distance(v_angle)\n                x = self.stl_analysis['spray_origin'][0] + distance * np.cos(np.radians(h_angle))\n                y = self.stl_analysis['spray_origin'][1] + distance * np.sin(np.radians(h_angle))\n                spray_height = self.stl_analysis['spray_origin'][2] + distance * np.tan(np.radians(v_angle))\n\n                if self.is_point_within_boundaries(x, y, spray_height):\n                    spray_points.append((h_angle, v_angle, distance))\n\n        return spray_points\n\n    def is_point_within_boundaries(self, x: float, y: float, spray_height: float) -&gt; bool:\n        return (0 &lt;= x &lt;= self.config.lawn.width and\n                0 &lt;= y &lt;= self.config.lawn.length)\n\n    def calculate_spray_distance(self, angle: float) -&gt; float:\n        v0 = np.sqrt(self.config.hose_performance.max_distance * 9.8 /\n                     np.sin(2 * np.radians(self.config.hose_performance.optimal_angle)))\n        t = 2 * v0 * np.sin(np.radians(angle)) / 9.8\n        return v0 * np.cos(np.radians(angle)) * t\n</code></pre>"},{"location":"#sprinkler.sprinkler_core.SprinklerSystem.analyze_stl","title":"<code>analyze_stl()</code>","text":"<p>Analyze the STL file to determine key points for spray calculation</p> Source code in <code>sprinkler/sprinkler_core.py</code> <pre><code>def analyze_stl(self):\n    \"\"\"Analyze the STL file to determine key points for spray calculation\"\"\"\n    stl_min = np.min(self.stl_mesh.vectors, axis=(0, 1))\n    stl_max = np.max(self.stl_mesh.vectors, axis=(0, 1))\n    stl_dimensions = stl_max - stl_min\n    spray_origin = self.get_spray_origin()\n    return {\n        'min': stl_min,\n        'max': stl_max,\n        'dimensions': stl_dimensions,\n        'spray_origin': spray_origin\n    }\n</code></pre>"},{"location":"#sprinkler.sprinkler_core.SprinklerSystem.get_spray_origin","title":"<code>get_spray_origin()</code>","text":"<p>Get the spray origin from the config</p> Source code in <code>sprinkler/sprinkler_core.py</code> <pre><code>def get_spray_origin(self):\n    \"\"\"Get the spray origin from the config\"\"\"\n    return np.array([\n        self.config.sprinkler_position.x,\n        self.config.sprinkler_position.y,\n        self.config.sprinkler_position.z\n    ])\n</code></pre>"},{"location":"#sprinkler.sprinkler_sim","title":"<code>sprinkler_sim</code>","text":"<p>Created on 2024-08-13</p> <p>@author: wf</p>"},{"location":"#sprinkler.sprinkler_sim.SprinklerSimulation","title":"<code>SprinklerSimulation</code>","text":"<p>A sprinkler simulation</p> Source code in <code>sprinkler/sprinkler_sim.py</code> <pre><code>class SprinklerSimulation:\n    \"\"\"\n    A sprinkler simulation\n    \"\"\"\n    def __init__(self, sprinkler_system: SprinklerSystem):\n        self.sprinkler_system = sprinkler_system\n        self.setup_scene()\n\n    def setup_scene(self):\n        self.scene = ui.scene(\n            width=800,\n            height=600,\n            grid=True,\n            background_color='#87CEEB'  # Sky blue\n        ).classes('w-full h-64')\n\n        # Add lawn\n        lawn_width = self.sprinkler_system.config.lawn.width\n        lawn_length = self.sprinkler_system.config.lawn.length\n        with self.scene.group().move(y=-0.01):  # Slightly below zero to avoid z-fighting with the grid\n            self.scene.box(lawn_width, 0.02, lawn_length).material('#7CFC00')  # Lawn green\n\n\n        # Add sprinkler\n        sprinkler_pos = self.sprinkler_system.config.sprinkler_position\n        with self.scene.group().move(x=sprinkler_pos.x, y=sprinkler_pos.y, z=sprinkler_pos.z):\n            self.scene.cylinder(0.1, 0.1, 0.5).material('#808080')  # Grey cylinder for sprinkler base\n            self.sprinkler_head = self.scene.sphere(0.05).material('#4682B4').move(z=0.5)  # Steel blue sphere for sprinkler head\n\n        self.scene.move_camera(x=lawn_width/2, y=-lawn_length/2, z=lawn_length/2, look_at_x=lawn_width/2, look_at_y=lawn_length/2, look_at_z=0)\n\n    def simulate_sprinkler(self):\n        spray_points = self.sprinkler_system.calculate_spray_points()\n\n        for h_angle, v_angle, distance in spray_points:\n            # Move sprinkler head\n            self.sprinkler_head.move(z=0.5)  # Reset to original position\n            self.sprinkler_head.rotate(h_angle, 0, v_angle)\n\n            # Show water spray\n            sprinkler_pos = self.sprinkler_system.config.sprinkler_position\n            end_x = sprinkler_pos.x + distance * math.cos(math.radians(h_angle))\n            end_y = sprinkler_pos.y + distance * math.sin(math.radians(h_angle))\n            end_z = sprinkler_pos.z + distance * math.tan(math.radians(v_angle))\n\n            self.scene.line([sprinkler_pos.x, sprinkler_pos.y, sprinkler_pos.z + 0.5],\n                            [end_x, end_y, end_z]).material('#1E90FF', opacity=0.5)  # Light blue, semi-transparent\n\n            ui.timer(0.1, lambda: None)  # Small delay to visualize movement\n</code></pre>"},{"location":"#sprinkler.stepper","title":"<code>stepper</code>","text":"<p>Created on 13.08.2024</p> <p>@author: wf</p>"},{"location":"#sprinkler.version","title":"<code>version</code>","text":"<p>Created on 2024-08-13</p> <p>@author: wf</p>"},{"location":"#sprinkler.version.Version","title":"<code>Version</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Version handling for nicesprinkler</p> Source code in <code>sprinkler/version.py</code> <pre><code>@dataclass\nclass Version(object):\n    \"\"\"\n    Version handling for nicesprinkler\n    \"\"\"\n\n    name = \"nicesprinkler\"\n    version = sprinkler.__version__\n    date = \"2024-08-13\"\n    updated = \"2024-08-10\"\n    description = \"Computer Controlled 2 Stepper motor 3D lawn sprinkler system\"\n\n    authors = \"Wolfgang Fahl\"\n\n    doc_url = \"https://wiki.bitplan.com/index.php/nicesprinkler\"\n    chat_url = \"https://github.com/WolfgangFahl/nicesprinkler/discussions\"\n    cm_url = \"https://github.com/WolfgangFahl/nicesprinkler\"\n\n    license = f\"\"\"Copyright 2024 contributors. All rights reserved.\n\n  Licensed under the Apache License 2.0\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Distributed on an \"AS IS\" basis without warranties\n  or conditions of any kind, either express or implied.\"\"\"\n    longDescription = f\"\"\"{name} version {version}\n{description}\n\n  Created by {authors} on {date} last updated {updated}\"\"\"\n</code></pre>"},{"location":"#sprinkler.webserver","title":"<code>webserver</code>","text":"<p>Created on 13.08.2024</p> <p>@author: wf</p>"},{"location":"#sprinkler.webserver.NiceSprinklerSolution","title":"<code>NiceSprinklerSolution</code>","text":"<p>               Bases: <code>InputWebSolution</code></p> <p>the NiceSprinkler solution</p> Source code in <code>sprinkler/webserver.py</code> <pre><code>class NiceSprinklerSolution(InputWebSolution):\n    \"\"\"\n    the NiceSprinkler solution\n    \"\"\"\n\n    def __init__(self, webserver: NiceSprinklerWebServer, client: Client):\n        \"\"\"\n        Initialize the solution\n\n        Args:\n            webserver (NiceSprinklerWebServer): The webserver instance associated with this context.\n            client (Client): The client instance this context is associated with.\n        \"\"\"\n        super().__init__(webserver, client)\n        self.simulation = None\n\n    async def home(self):\n        \"\"\"Generates the home page with a 3D viewer and controls for the sprinkler.\"\"\"\n        self.setup_menu()\n        with ui.column():\n            self.simulation = SprinklerSimulation(self.webserver.sprinkler_system)\n            self.simulation.setup_scene()\n            with ui.row():\n                ui.button('Start Simulation', on_click=self.simulation.simulate_sprinkler)\n                ui.button('Reset', on_click=self.reset_simulation)\n\n        await self.setup_footer()\n\n    async def reset_simulation(self):\n        \"\"\"Resets the simulation to its initial state.\"\"\"\n        self.simulation.scene.clear()\n        self.simulation.setup_scene()\n        ui.notify('Simulation reset')\n\n    def configure_settings(self):\n        \"\"\"Generates the settings page with options to modify sprinkler configuration.\"\"\"\n        config_str = self.webserver.sprinkler_system.config.to_yaml()\n        ui.textarea(\"Configuration\", value=config_str).classes(\"w-full\").on('change', self.update_config)\n\n    def update_config(self, e):\n        \"\"\"Updates the simulation configuration based on user input.\"\"\"\n        try:\n            new_config = SprinklerConfig.from_yaml(e.value)\n            self.webserver.sprinkler_system.config = new_config\n            self.simulation.sprinkler_system = self.webserver.sprinkler_system\n            self.reset_simulation()\n            ui.notify('Configuration updated successfully')\n        except Exception as ex:\n            ui.notify(f'Error updating configuration: {str(ex)}', color='red')\n</code></pre>"},{"location":"#sprinkler.webserver.NiceSprinklerSolution.__init__","title":"<code>__init__(webserver, client)</code>","text":"<p>Initialize the solution</p> <p>Parameters:</p> Name Type Description Default <code>webserver</code> <code>NiceSprinklerWebServer</code> <p>The webserver instance associated with this context.</p> required <code>client</code> <code>Client</code> <p>The client instance this context is associated with.</p> required Source code in <code>sprinkler/webserver.py</code> <pre><code>def __init__(self, webserver: NiceSprinklerWebServer, client: Client):\n    \"\"\"\n    Initialize the solution\n\n    Args:\n        webserver (NiceSprinklerWebServer): The webserver instance associated with this context.\n        client (Client): The client instance this context is associated with.\n    \"\"\"\n    super().__init__(webserver, client)\n    self.simulation = None\n</code></pre>"},{"location":"#sprinkler.webserver.NiceSprinklerSolution.configure_settings","title":"<code>configure_settings()</code>","text":"<p>Generates the settings page with options to modify sprinkler configuration.</p> Source code in <code>sprinkler/webserver.py</code> <pre><code>def configure_settings(self):\n    \"\"\"Generates the settings page with options to modify sprinkler configuration.\"\"\"\n    config_str = self.webserver.sprinkler_system.config.to_yaml()\n    ui.textarea(\"Configuration\", value=config_str).classes(\"w-full\").on('change', self.update_config)\n</code></pre>"},{"location":"#sprinkler.webserver.NiceSprinklerSolution.home","title":"<code>home()</code>  <code>async</code>","text":"<p>Generates the home page with a 3D viewer and controls for the sprinkler.</p> Source code in <code>sprinkler/webserver.py</code> <pre><code>async def home(self):\n    \"\"\"Generates the home page with a 3D viewer and controls for the sprinkler.\"\"\"\n    self.setup_menu()\n    with ui.column():\n        self.simulation = SprinklerSimulation(self.webserver.sprinkler_system)\n        self.simulation.setup_scene()\n        with ui.row():\n            ui.button('Start Simulation', on_click=self.simulation.simulate_sprinkler)\n            ui.button('Reset', on_click=self.reset_simulation)\n\n    await self.setup_footer()\n</code></pre>"},{"location":"#sprinkler.webserver.NiceSprinklerSolution.reset_simulation","title":"<code>reset_simulation()</code>  <code>async</code>","text":"<p>Resets the simulation to its initial state.</p> Source code in <code>sprinkler/webserver.py</code> <pre><code>async def reset_simulation(self):\n    \"\"\"Resets the simulation to its initial state.\"\"\"\n    self.simulation.scene.clear()\n    self.simulation.setup_scene()\n    ui.notify('Simulation reset')\n</code></pre>"},{"location":"#sprinkler.webserver.NiceSprinklerSolution.update_config","title":"<code>update_config(e)</code>","text":"<p>Updates the simulation configuration based on user input.</p> Source code in <code>sprinkler/webserver.py</code> <pre><code>def update_config(self, e):\n    \"\"\"Updates the simulation configuration based on user input.\"\"\"\n    try:\n        new_config = SprinklerConfig.from_yaml(e.value)\n        self.webserver.sprinkler_system.config = new_config\n        self.simulation.sprinkler_system = self.webserver.sprinkler_system\n        self.reset_simulation()\n        ui.notify('Configuration updated successfully')\n    except Exception as ex:\n        ui.notify(f'Error updating configuration: {str(ex)}', color='red')\n</code></pre>"},{"location":"#sprinkler.webserver.NiceSprinklerWebServer","title":"<code>NiceSprinklerWebServer</code>","text":"<p>               Bases: <code>InputWebserver</code></p> <p>WebServer class that manages the server and handles Sprinkler operations.</p> Source code in <code>sprinkler/webserver.py</code> <pre><code>class NiceSprinklerWebServer(InputWebserver):\n    \"\"\"WebServer class that manages the server and handles Sprinkler operations.\"\"\"\n\n    @classmethod\n    def get_config(cls) -&gt; WebserverConfig:\n        copy_right = \"(c)2024 Wolfgang Fahl\"\n        config = WebserverConfig(\n            copy_right=copy_right,\n            version=Version(),\n            default_port=9859,\n            short_name=\"nicesprinkler\",\n        )\n        server_config = WebserverConfig.get(config)\n        server_config.solution_class = NiceSprinklerSolution\n        return server_config\n\n    def __init__(self):\n        \"\"\"Constructs all the necessary attributes for the WebServer object.\"\"\"\n        InputWebserver.__init__(self, config=NiceSprinklerWebServer.get_config())\n        self.sprinkler_system = None\n\n    def configure_run(self):\n        \"\"\"\n        Configure the run based on command line arguments\n        \"\"\"\n        examples_path = self.examples_path()\n        if hasattr(self.args, \"root_path\"):\n            self.root_path = self.args.root_path\n        else:\n            self.root_path = examples_path\n        self.config_path = (\n            self.args.config\n            if os.path.isabs(self.args.config)\n            else os.path.join(self.root_path, self.args.config)\n        )\n        self.stl_path = (\n            self.args.stl\n            if os.path.isabs(self.args.stl)\n            else os.path.join(self.root_path, self.args.stl)\n        )\n\n        # Create SprinklerSystem\n        self.sprinkler_system = SprinklerSystem(self.config_path, self.stl_path)\n\n    @classmethod\n    def examples_path(cls) -&gt; str:\n        path = os.path.join(os.path.dirname(__file__), \"../nicesprinkler_examples\")\n        path = os.path.abspath(path)\n        return path\n</code></pre>"},{"location":"#sprinkler.webserver.NiceSprinklerWebServer.__init__","title":"<code>__init__()</code>","text":"<p>Constructs all the necessary attributes for the WebServer object.</p> Source code in <code>sprinkler/webserver.py</code> <pre><code>def __init__(self):\n    \"\"\"Constructs all the necessary attributes for the WebServer object.\"\"\"\n    InputWebserver.__init__(self, config=NiceSprinklerWebServer.get_config())\n    self.sprinkler_system = None\n</code></pre>"},{"location":"#sprinkler.webserver.NiceSprinklerWebServer.configure_run","title":"<code>configure_run()</code>","text":"<p>Configure the run based on command line arguments</p> Source code in <code>sprinkler/webserver.py</code> <pre><code>def configure_run(self):\n    \"\"\"\n    Configure the run based on command line arguments\n    \"\"\"\n    examples_path = self.examples_path()\n    if hasattr(self.args, \"root_path\"):\n        self.root_path = self.args.root_path\n    else:\n        self.root_path = examples_path\n    self.config_path = (\n        self.args.config\n        if os.path.isabs(self.args.config)\n        else os.path.join(self.root_path, self.args.config)\n    )\n    self.stl_path = (\n        self.args.stl\n        if os.path.isabs(self.args.stl)\n        else os.path.join(self.root_path, self.args.stl)\n    )\n\n    # Create SprinklerSystem\n    self.sprinkler_system = SprinklerSystem(self.config_path, self.stl_path)\n</code></pre>"}]}